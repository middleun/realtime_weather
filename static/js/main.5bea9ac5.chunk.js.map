{"version":3,"sources":["components/DisplayData.js","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayData","props","weather","temperature","description","location","region","country","img","wind_speed","pressure","precip","humidity","className","src","alt","NavBar","onSubmit","e","changeWeather","placeholder","onChange","changeRegion","target","value","App","state","coords","latitude","longitude","data","inputData","change","setState","event","preventDefault","Axios","get","then","res","weatherData","current","weather_descriptions","name","weather_icons","navigator","geolocation","getCurrentPosition","position","newCoords","longtitude","console","log","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bea9ac5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction DisplayData(props){\r\n    // console.log(props.weather);\r\n    const {temperature, description, location, region, country, img, wind_speed, pressure, precip, humidity}=props.weather;\r\n    return(\r\n        <div className=\"user-weather\">\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 weather-temp\">\r\n                    <h1>{temperature}<sup>o</sup>C , {description}</h1>\r\n                    <h4>{location}<b>{region} , {country}</b></h4>\r\n                    \r\n                </div>\r\n\r\n                <div className=\"col-md-9\">\r\n                    <img className=\"mainImg\" src={img} alt=\"weather-img\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 weather-info\">\r\n                    <p><b>Wind Speed</b>(km/hr)</p>\r\n                    <h2>{wind_speed}</h2>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 weather-info\">\r\n                    <p><b>Preassure</b>(millibar)</p>\r\n                    <h2>{pressure}</h2>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 weather-info\">\r\n                    <p><b>Precipitation</b>(mm)</p>\r\n                    <h2>{precip}</h2>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 weather-info\">\r\n                    <p><b>Humidity</b>(%)</p>\r\n                    <h2>{humidity}</h2>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayData;\r\n","import React from 'react';\r\n\r\nfunction NavBar(props){\r\n    return(\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n                <h1 className=\"title\">Realtime Weather</h1>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n                <form className=\"region\" onSubmit={(e)=>props.changeWeather(e)}>\r\n                    <input className=\"region-input\" placeholder=\"Enter your Location\" onChange={ \r\n                        (e)=> {props.changeRegion(e.target.value)}}/>\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n        \r\n    )\r\n\r\n}\r\nexport default NavBar;\r\n","import React from 'react';\nimport Axios from 'axios';\nimport './App.css';\nimport DisplayData from './components/DisplayData';\nimport NavBar from './components/NavBar';\n\n\n\nclass App extends React.Component{\n\n  state={\n    coords:{\n      latitude:37,\n      longitude:127\n    },\n    data:{},\n    inputData:\"\"\n  }\n  // 새로운 변수를 만들고 setState로 지정해주어야.\n\n  componentDidMount(){\n    // console.log('render mounted');\n    if(navigator.geolocation){\n      // console.log('supported');\n      navigator.geolocation.getCurrentPosition((position) => {\n        // console.log(position.coords.latitude, position.coords.longitude);\n        let newCoords={\n          latitude:position.coords.latitude,\n          longtitude:position.coords.longitude\n        }\n        this.setState({coords:newCoords});\n        // console.log(this.state.coords);\n\n        Axios.get(`http://api.weatherstack.com/current?access_key=3529f1d57aac45975e8d3583d19d5890&query=${this.state.coords.latitude},${this.state.coords.longtitude}`).then((res)=>{\n          // console.log(res);\n          let weatherData={\n            temperature: res.data.current.temperature,\n            description: res.data.current.weather_descriptions[0],\n            location: res.data.location.name,\n            region: res.data.location.region,\n            country: res.data.location.country,\n            wind_speed: res.data.current.wind_speed,\n            pressure: res.data.current.pressure,\n            precip: res.data.current.precip,\n            humidity: res.data.current.humidity,\n            img: res.data.current.weather_icons\n          }\n          this.setState({data:weatherData});\n          // console.log(this.state.data);\n\n\n        });\n      });\n\n    }else{\n      console.log('not supported');\n    }\n  }\n\n  // input에 들어가는 value값\n  change=(value)=>{\n    // console.log(value);\n    this.setState({inputData:value});\n    // console.log(this.state.inputData)\n\n  }\n  //this값을 바인딩하기 위해 화살표함수 써줘야. \n  // 날씨 img바꾸려면 아이콘 혹은 이미지 저장 후 배열 지정(1.jpg ...)\n  changeWeather=(event)=>{\n    event.preventDefault();\n    Axios.get(`http://api.weatherstack.com/current?access_key=3529f1d57aac45975e8d3583d19d5890&query=${this.state.inputData}`).then((res)=>{\n      // console.log(res);\n      let weatherData={\n        temperature: res.data.current.temperature,\n        description: res.data.current.weather_descriptions[0],\n        location: res.data.location.name,\n        region: res.data.location.region,\n        country: res.data.location.country,\n        wind_speed: res.data.current.wind_speed,\n        pressure: res.data.current.pressure,\n        precip: res.data.current.precip,\n        humidity: res.data.current.humidity,\n        img: res.data.current.weather_icons\n      }\n      this.setState({data:weatherData});\n      // console.log(this.state.data);\n\n\n    });\n\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <NavBar changeRegion={this.change} changeWeather={this.changeWeather}/>\n          <DisplayData weather={this.state.data}/>\n        </div>\n      </div>\n    );\n  }\n    \n  \n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}